# Generated by Django 5.0.2 on 2024-03-06 10:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.hashers import make_password


def populate_groups(apps, schema_editor):
        names = [
             {'name': 'Administrator', 'perms': [
                            'svjis_view_redaction_menu',
                            'svjis_edit_article',
                            'svjis_add_article_comment',
                            'svjis_edit_article_menu',
                            'svjis_edit_article_news',
                            'svjis_view_admin_menu',
                            'svjis_edit_admin_users',
                            'svjis_edit_admin_groups_news',
            ]},
             {'name': 'Vlastník', 'perms': [
                            'svjis_add_article_comment',
            ]},
             {'name': 'Člen výboru', 'perms': [
                            'svjis_view_redaction_menu',
                            'svjis_edit_article',
                            'svjis_add_article_comment',
                            'svjis_edit_article_menu',
                            'svjis_edit_article_news',
            ]},
             {'name': 'Dodavatel', 'perms': [
                            'svjis_add_article_comment',
            ]},
             {'name': 'Redaktor', 'perms': [
                            'svjis_view_redaction_menu',
                            'svjis_edit_article',
                            'svjis_add_article_comment',
                            'svjis_edit_article_news',
            ]},
        ]
        Group = apps.get_model('auth', 'Group')
        Permission = apps.get_model('auth', 'Permission')
        for g in names:
            gobj = Group(name=g['name'])
            gobj.save()
            for p in g['perms']:
                try:
                    pobj = Permission.objects.get(name=p)
                    gobj.permissions.add(pobj)
                except:
                     print(f"Permission {p} doesnt exist")


def create_admin(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')
    u = User.objects.create(username='admin',
                            email='admin@test.cz',
                            password=make_password('masterkey'),
                            last_name='admin')
    u.is_active = True
    u.is_staff = True
    u.is_superuser = True
    u.save()
    g = Group.objects.get(name='Administrator')
    u.groups.add(g)



class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='article',
            options={'ordering': ['-id'], 'permissions': (('svjis_view_redaction_menu', 'Can view Redaction menu'), ('svjis_edit_article', 'Can edit Article'))},
        ),
        migrations.AlterModelOptions(
            name='articlecomment',
            options={'ordering': ['-id'], 'permissions': (('svjis_add_article_comment', 'Can add Article comment'),)},
        ),
        migrations.AlterModelOptions(
            name='articlemenu',
            options={'ordering': ['description'], 'permissions': (('svjis_edit_article_menu', 'Can edit Menu'),)},
        ),
        migrations.AlterModelOptions(
            name='news',
            options={'ordering': ['-id'], 'permissions': (('svjis_edit_article_news', 'Can edit News'),)},
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salutation', models.CharField(blank=True, max_length=30, verbose_name='Salutation')),
                ('address', models.CharField(blank=True, max_length=50, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='City')),
                ('post_code', models.CharField(blank=True, max_length=10, verbose_name='Post code')),
                ('country', models.CharField(blank=True, max_length=50, verbose_name='Country')),
                ('phone', models.CharField(blank=True, max_length=30, verbose_name='Phone')),
                ('show_in_phonelist', models.BooleanField(default=False, verbose_name='Show in phonelist')),
                ('internal_note', models.CharField(blank=True, max_length=250, verbose_name='Internal note')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('svjis_view_admin_menu', 'Can view Administration menu'), ('svjis_edit_admin_users', 'Can edit Users'), ('svjis_edit_admin_groups_news', 'Can edit Groups')),
            },
        ),
        migrations.RunPython(populate_groups),
        migrations.RunPython(create_admin),
    ]
