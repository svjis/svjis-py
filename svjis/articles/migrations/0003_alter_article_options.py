# Generated by Django 5.0.2 on 2024-03-06 14:24

from django.db import migrations
from django.contrib.auth.hashers import make_password
from articles.models import ArticleMenu


def populate_groups(apps, schema_editor):
        names = [
             {'name': 'Administrator', 'perms': [
                            'articles.svjis_view_redaction_menu',
                            'articles.svjis_edit_article',
                            'articles.svjis_add_article_comment',
                            'articles.svjis_edit_article_menu',
                            'articles.svjis_edit_article_news',
                            'articles.svjis_view_admin_menu',
                            'articles.svjis_edit_admin_users',
                            'articles.svjis_edit_admin_groups',
            ]},
             {'name': 'Vlastník', 'perms': [
                            'svjis_add_article_comment',
            ]},
             {'name': 'Člen výboru', 'perms': [
                            'svjis_view_redaction_menu',
                            'svjis_edit_article',
                            'svjis_add_article_comment',
                            'svjis_edit_article_menu',
                            'svjis_edit_article_news',
            ]},
             {'name': 'Dodavatel', 'perms': [
                            'svjis_add_article_comment',
            ]},
             {'name': 'Redaktor', 'perms': [
                            'svjis_view_redaction_menu',
                            'svjis_edit_article',
                            'svjis_add_article_comment',
                            'svjis_edit_article_news',
            ]},
        ]
        Group = apps.get_model('auth', 'Group')
        Permission = apps.get_model('auth', 'Permission')
        for g in names:
            gobj = Group(name=g['name'])
            gobj.save()
            for p in g['perms']:
                try:
                    pobj = Permission.objects.get(content_type__app_label='articles', codename=p)
                    gobj.permissions.add(pobj)
                except:
                     print(f"Permission {p} doesnt exist")


def create_admin(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')
    u = User.objects.create(username='admin',
                            email='admin@test.cz',
                            password=make_password('masterkey'),
                            last_name='admin')
    u.is_active = True
    u.is_staff = True
    u.is_superuser = True
    u.save()
    g = Group.objects.get(name='Administrator')
    u.groups.add(g)


def create_article_menu(apps, schema_editor):
     menu = ['Vývěska', 'Dotazy a návody' ,'Smlouvy' ,'Zápisy']
     for m in menu:
          ArticleMenu.objects.create(description=m)



class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0002_alter_article_options_alter_articlecomment_options_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='article',
            options={'ordering': ['-id'], 'permissions': (('svjis_view_redaction_menu', 'Can view Redaction Menu'), ('svjis_edit_article', 'Can edit Article'))},
        ),
        migrations.RunPython(populate_groups),
        migrations.RunPython(create_admin),
        migrations.RunPython(create_article_menu),
    ]
